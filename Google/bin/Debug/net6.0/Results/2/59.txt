Install Docker Engine on Ubuntu | Docker Documentation Search Toggle navigation Home Guides Manuals Reference Samples Contribute Manuals Docker Engine Install Ubuntu Install Docker Engine on Ubuntu To get started with Docker Engine on Ubuntu, make sure you meet the prerequisites , then install Docker . Prerequisites OS requirements To install Docker Engine, you need the 64-bit version of one of these Ubuntu
versions: Ubuntu Kinetic 22.10 Ubuntu Jammy 22.04 (LTS) Ubuntu Focal 20.04 (LTS) Ubuntu Bionic 18.04 (LTS) Docker Engine is compatible with x86_64 (or amd64 ), armhf , arm64 , and s390x architectures. Uninstall old versions Older versions of Docker went by the names of docker , docker.io , or docker-engine . Uninstall any such older versions before attempting to install
a new version: $ sudo apt-get remove docker docker-engine docker.io containerd runc Itâs OK if apt-get reports that none of these packages are installed. Images, containers, volumes, and networks stored in /var/lib/docker/ arenât
automatically removed when you uninstall Docker. If you want to start with a
clean installation, and prefer to clean up any existing data, refer to the uninstall Docker Engine section. Installation methods You can install Docker Engine in different ways, depending on your needs: Docker Engine comes bundled with Docker Desktop for Linux . This is
the easiest and quickest way to get started. You can also set up and install Docker Engine from Dockerâs apt repository . Install it manually and manage upgrades manually. Using a convenience scripts . Only
recommended for testing and development environments. Install using the repository Before you install Docker Engine for the first time on a new host machine, you
need to set up the Docker repository. Afterward, you can install and update
Docker from the repository. Set up the repository Update the apt package index and install packages to allow apt to use a
repository over HTTPS: $ sudo apt-get update $ sudo apt-get install \ ca-certificates \ curl \ gnupg \ lsb-release Add Dockerâs official GPG key: $ sudo mkdir -m 0755 -p /etc/apt/keyrings $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg Use the following command to set up the repository: $ echo \ "deb [arch= $( dpkg --print-architecture ) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \ $( lsb_release -cs ) stable" | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null Install Docker Engine Update the apt package index: $ sudo apt-get update Receiving a GPG error when running apt-get update ? Your default umask may be incorrectly configured, preventing detection of the
repository public key file. Try granting read permission for the Docker
public key file before updating the package index: $ sudo chmod a+r /etc/apt/keyrings/docker.gpg $ sudo apt-get update Install Docker Engine, containerd, and Docker Compose. Latest Specific version To install the latest version, run: $ sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin To install a specific version of Docker Engine, start by list the available
versions in the repository: # List the available versions: $ apt-cache madison docker-ce | awk '{ print $3 }' 5:20.10.16~3-0~ubuntu-jammy
5:20.10.15~3-0~ubuntu-jammy
5:20.10.14~3-0~ubuntu-jammy
5:20.10.13~3-0~ubuntu-jammy Select the desired version and install: $ VERSION_STRING = 5:20.10.13~3-0~ubuntu-jammy $ sudo apt-get install docker-ce = $VERSION_STRING docker-ce-cli = $VERSION_STRING containerd.io docker-buildx-plugin docker-compose-plugin Verify that the Docker Engine installation is successful by running the hello-world image: $ sudo docker run hello-world This command downloads a test image and runs it in a container. When the
container runs, it prints a confirmation message and exits. You have now successfully installed and started Docker Engine. The docker user
group exists but contains no users, which is why youâre required to use sudo to run Docker commands. Continue to Linux post-install to allow non-privileged users to run Docker commands and for other optional
configuration steps. Upgrade Docker Engine To upgrade Docker Engine, follow the installation instructions , choosing the new version
you want to install. Install from a package If you canât use Dockerâs apt repository to install Docker Engine, you can
download the deb file for your release and install it manually. You need to
download a new file each time you want to upgrade Docker Engine. Go to https://download.docker.com/linux/ubuntu/dists/ . Select your Ubuntu version in the list. Go to pool/stable/ and select the applicable architecture ( amd64 , armhf , arm64 , or s390x ). Download the following deb files for the Docker Engine, CLI, containerd,
and Docker Compose packages: containerd.io_&lt;version&gt;_&lt;arch&gt;.deb docker-ce_&lt;version&gt;_&lt;arch&gt;.deb docker-ce-cli_&lt;version&gt;_&lt;arch&gt;.deb docker-buildx-plugin_&lt;version&gt;_&lt;arch&gt;.deb docker-compose-plugin_&lt;version&gt;_&lt;arch&gt;.deb Install the .deb packages. Update the paths in the following example to
where you downloaded the Docker packages. $ sudo dpkg -i ./containerd.io_&lt;version&gt;_&lt; arch &gt; .deb \ ./docker-ce_&lt;version&gt;_&lt; arch &gt; .deb \ ./docker-ce-cli_&lt;version&gt;_&lt; arch &gt; .deb \ ./docker-buildx-plugin_&lt;version&gt;_&lt; arch &gt; .deb \ ./docker-compose-plugin_&lt;version&gt;_&lt; arch &gt; .deb The Docker daemon starts automatically. Verify that the Docker Engine installation is successful by running the hello-world image: $ sudo service docker start $ sudo docker run hello-world This command downloads a test image and runs it in a container. When the
container runs, it prints a confirmation message and exits. You have now successfully installed and started Docker Engine. The docker user
group exists but contains no users, which is why youâre required to use sudo to run Docker commands. Continue to Linux post-install to allow non-privileged users to run Docker commands and for other optional
configuration steps. Upgrade Docker Engine To upgrade Docker Engine, download the newer package file and repeat the installation procedure , pointing to the new file. Install using the convenience script Docker provides a convenience script at https://get.docker.com/ to install Docker into
development environments non-interactively. The convenience script isnât
recommended for production environments, but itâs useful for creating a
provisioning script tailored to your needs. Also refer to the install using the repository steps to learn
about installation steps to install using the package repository. The source
code for the script is open source, and can be found in the docker-install repository on GitHub . Always examine scripts downloaded from the internet before running them locally.
Before installing, make yourself familiar with potential risks and limitations
of the convenience script: The script requires root or sudo privileges to run. The script attempts to detect your Linux distribution and version and
configure your package management system for you. The script doesnât allow you to customize most installation parameters. The script installs dependencies and recommendations without asking for
confirmation. This may install a large number of packages, depending on the
current configuration of your host machine. By default, the script installs the latest stable release of Docker,
containerd, and runc. When using this script to provision a machine, this may
result in unexpected major version upgrades of Docker. Always test upgrades in
a test environment before deploying to your production systems. The script isnât designed to upgrade an existing Docker installation. When
using the script to update an existing installation, dependencies may not be
updated to the expected version, resulting in outdated versions. Tip: preview script steps before running You can run the script with the --dry-run option to learn what steps the
script will run when invoked: $ curl -fsSL https://get.docker.com -o get-docker.sh $ sudo sh ./get-docker.sh --dry-run This example downloads the script from https://get.docker.com/ and runs it to install the
latest stable release of Docker on Linux: $ curl -fsSL https://get.docker.com -o get-docker.sh $ sudo sh get-docker.sh Executing docker install script, commit: 7cae5f8b0decc17d6571f9f52eb840fbc13b2737 &lt;...&gt; You have now successfully installed and started Docker Engine. The docker service starts automatically on Debian based distributions. On RPM based
distributions, such as CentOS, Fedora, RHEL or SLES, you need to start it
manually using the appropriate systemctl or service command. As the message
indicates, non-root users canât run Docker commands by default. Use Docker as a non-privileged user, or install in rootless mode? The installation script requires root or sudo privileges to install and
use Docker. If you want to grant non-root users access to Docker, refer to the post-installation steps for Linux .
You can also install Docker without root privileges, or configured to run in
rootless mode. For instructions on running Docker in rootless mode, refer to run the Docker daemon as a non-root user (rootless mode) . Install pre-releases Docker also provides a convenience script at https://test.docker.com/ to install pre-releases of
Docker on Linux. This script is equal to the script at get.docker.com , but
configures your package manager to use the test channel of the Docker package
repository. The test channel includes both stable and pre-releases (beta
versions, release-candidates) of Docker. Use this script to get early access to
new releases, and to evaluate them in a testing environment before theyâre
released as stable. To install the latest version of Docker on Linux from the test channel, run: $ curl -fsSL https://test.docker.com -o test-docker.sh $ sudo sh test-docker.sh Upgrade Docker after using the convenience script If you installed Docker using the convenience script, you should upgrade Docker
using your package manager directly. Thereâs no advantage to re-running the
convenience script. Re-running it can cause issues if it attempts to re-install
repositories which already exist on the host machine. Uninstall Docker Engine Uninstall the Docker Engine, CLI, containerd, and Docker Compose packages: $ sudo apt-get purge docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras Images, containers, volumes, or custom configuration files on your host
arenât automatically removed. To delete all images, containers, and volumes: $ sudo rm -rf /var/lib/docker $ sudo rm -rf /var/lib/containerd You must delete any edited configuration files manually. Next steps Continue to Post-installation steps for Linux . Review the topics in Develop with Docker to learn
how to build new applications using Docker. Contents: &times; Page details 10 minute read Edit this page Request changes Tags docker install script ubuntu docker server ubuntu server docker install docker engine ubuntu install docker on ubuntu server ubuntu 18.04 docker-ce install docker engine on ubuntu ubuntu install docker ce ubuntu install docker engine Contents Prerequisites OS requirements Uninstall old versions Installation methods Install using the repository Set up the repository Install Docker Engine Upgrade Docker Engine Install from a package Upgrade Docker Engine Install using the convenience script Install pre-releases Upgrade Docker after using the convenience script Uninstall Docker Engine Next steps Product offerings Docker Personal Docker Pro Docker Team Docker Business Compare Subscriptions Features Docker Desktop Docker Hub Secure Software Supply Chain Container Runtime Developer Tools Trusted Content Docker Product Roadmap Developers Use Cases Get Started Blog Community Open Source Preview Program Pricing FAQ Docker Verified Publisher Partners About Us What is a Container? Why Docker? Virtual Events Swag Store Newsroom Careers Contact Us Customers Newsletter Terms of Service Status Legal Copyright &copy; 2013-2023 Docker Inc. All rights reserved. Cookie Settings Twitter Youtube GitHub Linkedin Facebook Slideshare Reddit 